第1步
符号栈:<函数定义> # 
输入栈:type id ( ) { type id ; type id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<函数定义>-><修饰词闭包><类型><变量>(<参数声明>){<函数块>}

第2步
符号栈:<修饰词闭包> <类型> <变量> ( <参数声明> ) { <函数块> } # 
输入栈:type id ( ) { type id ; type id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<修饰词闭包>->$

第3步
符号栈:<类型> <变量> ( <参数声明> ) { <函数块> } # 
输入栈:type id ( ) { type id ; type id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<类型>->type<取地址>

第4步
符号栈:type <取地址> <变量> ( <参数声明> ) { <函数块> } # 
输入栈:type id ( ) { type id ; type id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
匹配!
第5步
符号栈:<取地址> <变量> ( <参数声明> ) { <函数块> } # 
输入栈:id ( ) { type id ; type id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<取地址>-><星号闭包>

第6步
符号栈:<星号闭包> <变量> ( <参数声明> ) { <函数块> } # 
输入栈:id ( ) { type id ; type id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<星号闭包>->$

第7步
符号栈:<变量> ( <参数声明> ) { <函数块> } # 
输入栈:id ( ) { type id ; type id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<变量>-><标志符><数组下标>

第8步
符号栈:<标志符> <数组下标> ( <参数声明> ) { <函数块> } # 
输入栈:id ( ) { type id ; type id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<标志符>->id

第9步
符号栈:id <数组下标> ( <参数声明> ) { <函数块> } # 
输入栈:id ( ) { type id ; type id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
匹配!
第10步
符号栈:<数组下标> ( <参数声明> ) { <函数块> } # 
输入栈:( ) { type id ; type id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<数组下标>->$

第11步
符号栈:( <参数声明> ) { <函数块> } # 
输入栈:( ) { type id ; type id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
匹配!
第12步
符号栈:<参数声明> ) { <函数块> } # 
输入栈:) { type id ; type id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<参数声明>->$

第13步
符号栈:) { <函数块> } # 
输入栈:) { type id ; type id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
匹配!
第14步
符号栈:{ <函数块> } # 
输入栈:{ type id ; type id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
匹配!
第15步
符号栈:<函数块> } # 
输入栈:type id ; type id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<函数块>-><声明语句闭包><函数块闭包>

第16步
符号栈:<声明语句闭包> <函数块闭包> } # 
输入栈:type id ; type id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<声明语句闭包>-><声明语句><声明语句闭包>

第17步
符号栈:<声明语句> <声明语句闭包> <函数块闭包> } # 
输入栈:type id ; type id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<声明语句>-><声明>;

第18步
符号栈:<声明> ; <声明语句闭包> <函数块闭包> } # 
输入栈:type id ; type id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<声明>-><修饰词闭包><类型><变量><赋初值>

第19步
符号栈:<修饰词闭包> <类型> <变量> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
输入栈:type id ; type id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<修饰词闭包>->$

第20步
符号栈:<类型> <变量> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
输入栈:type id ; type id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<类型>->type<取地址>

第21步
符号栈:type <取地址> <变量> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
输入栈:type id ; type id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
匹配!
第22步
符号栈:<取地址> <变量> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
输入栈:id ; type id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<取地址>-><星号闭包>

第23步
符号栈:<星号闭包> <变量> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
输入栈:id ; type id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<星号闭包>->$

第24步
符号栈:<变量> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
输入栈:id ; type id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<变量>-><标志符><数组下标>

第25步
符号栈:<标志符> <数组下标> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
输入栈:id ; type id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<标志符>->id

第26步
符号栈:id <数组下标> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
输入栈:id ; type id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
匹配!
第27步
符号栈:<数组下标> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
输入栈:; type id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<数组下标>->$

第28步
符号栈:<赋初值> ; <声明语句闭包> <函数块闭包> } # 
输入栈:; type id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<赋初值>->$

第29步
符号栈:; <声明语句闭包> <函数块闭包> } # 
输入栈:; type id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
匹配!
第30步
符号栈:<声明语句闭包> <函数块闭包> } # 
输入栈:type id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<声明语句闭包>-><声明语句><声明语句闭包>

第31步
符号栈:<声明语句> <声明语句闭包> <函数块闭包> } # 
输入栈:type id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<声明语句>-><声明>;

第32步
符号栈:<声明> ; <声明语句闭包> <函数块闭包> } # 
输入栈:type id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<声明>-><修饰词闭包><类型><变量><赋初值>

第33步
符号栈:<修饰词闭包> <类型> <变量> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
输入栈:type id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<修饰词闭包>->$

第34步
符号栈:<类型> <变量> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
输入栈:type id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<类型>->type<取地址>

第35步
符号栈:type <取地址> <变量> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
输入栈:type id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
匹配!
第36步
符号栈:<取地址> <变量> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
输入栈:id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<取地址>-><星号闭包>

第37步
符号栈:<星号闭包> <变量> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
输入栈:id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<星号闭包>->$

第38步
符号栈:<变量> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
输入栈:id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<变量>-><标志符><数组下标>

第39步
符号栈:<标志符> <数组下标> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
输入栈:id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<标志符>->id

第40步
符号栈:id <数组下标> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
输入栈:id ; id ++ ; id = id -- ; id = id ++ + id ; } # 
匹配!
第41步
符号栈:<数组下标> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
输入栈:; id ++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<数组下标>->$

第42步
符号栈:<赋初值> ; <声明语句闭包> <函数块闭包> } # 
输入栈:; id ++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<赋初值>->$

第43步
符号栈:; <声明语句闭包> <函数块闭包> } # 
输入栈:; id ++ ; id = id -- ; id = id ++ + id ; } # 
匹配!
第44步
符号栈:<声明语句闭包> <函数块闭包> } # 
输入栈:id ++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<声明语句闭包>->$

第45步
符号栈:<函数块闭包> } # 
输入栈:id ++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<函数块闭包>-><赋值函数><函数块闭包>

第46步
符号栈:<赋值函数> <函数块闭包> } # 
输入栈:id ++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<赋值函数>-><变量><赋值或函数调用>

第47步
符号栈:<变量> <赋值或函数调用> <函数块闭包> } # 
输入栈:id ++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<变量>-><标志符><数组下标>

第48步
符号栈:<标志符> <数组下标> <赋值或函数调用> <函数块闭包> } # 
输入栈:id ++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<标志符>->id

第49步
符号栈:id <数组下标> <赋值或函数调用> <函数块闭包> } # 
输入栈:id ++ ; id = id -- ; id = id ++ + id ; } # 
匹配!
第50步
符号栈:<数组下标> <赋值或函数调用> <函数块闭包> } # 
输入栈:++ ; id = id -- ; id = id ++ + id ; } # 
所用推出式：<数组下标>->$

第51步
符号栈:<赋值或函数调用> <函数块闭包> } # 
输入栈:++ ; id = id -- ; id = id ++ + id ; } # 
Error
